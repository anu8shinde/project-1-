using JuMP, GLPK

m = 21
arcs = [(1,3),(3,4),(4,21),(21,16),(2,5),(5,6), (6,8), (8,14), (7,9), (9,13), (13,15), (15,17), (17,18), (10,11), (11,12), (12,19), (19,20), (3,5), (6,7), (4,10), (8,11), (12,13), (16,17), (18,19)]
u = Dict(arcs .=> [Inf, Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf, 25,33,33,33,33,33,33 ])
c = Dict(arcs .=> [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1, 4, 3, 2, 2, 3])
b = [30,10,0,0,0,0,0,0,-10,0,0,0,0,-20,-10,0,0,0,0,-20,20]

model = Model(GLPK.Optimizer)
@variable(model, 0 <=x[a in arcs]<=u[a])

@objective(model, Min, sum(c[a]*x[a] for a in arcs))
@constraint(model, [k in 1:m], sum(x[a] for a in arcs if a[1]==k) - sum(x[a] for a in arcs if a[2]==k) == b[k])

optimize!(model)

if termination_status(model) == MOI.OPTIMAL
    println("Objective value:", JuMP.objective_value(model))
    for a in arcs
        println("Flow on arc $a is", value.(x[a]))
    end 
else
    println("Optimise was not successful. Return code:", termination_status(model))
end 
