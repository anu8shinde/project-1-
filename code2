using JuMP, GLPK

m = 21

#defining graph: 
arcs = [(1,3),(3,4),(4,21),(21,16),(2,6),(6,8),(8,14),(9,15),(15,18),(12,20),(3,5),(5,8),(6,7),(7,9),
(4,10),(10,12),(8,11),(11,12),(12,13),(13,15),(16,17),(17,18),(18,19),(19,20)]
#upper bound: 
u = Dict(arcs .=> [Inf, Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,Inf,25,Inf,33,Inf,33,Inf,33,Inf,33,Inf,33,Inf,33,Inf])

#cost per unit: 
c = Dict(arcs .=> [0,0,0,0,0,0,0,0,-9,0,1,0,1,0,4,0,3,0,2,0,2,0,3,0])

b = [30,10,0,0,0,0,0,0,-10,0,0,0,0,-20,-10,0,0,0,0,-20,20]

model = Model(GLPK.Optimizer)
@variable(model, 0 <=x[a in arcs]<=u[a])

@objective(model, Min, sum(c[a]*x[a] for a in arcs))
@constraint(model, [k in 1:m], sum(x[a] for a in arcs if a[1]==k) - sum(x[a] for a in arcs if a[2]==k) == b[k])

optimize!(model)

if termination_status(model) == MOI.OPTIMAL
    println("Objective value:", JuMP.objective_value(model))
    for a in arcs
        println("Flow on arc $a is", value.(x[a]))
    end 
else
    println("Optimise was not successful. Return code:", termination_status(model))
end 





